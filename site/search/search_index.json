{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Big Beill's Greenhouse","text":"<p>A showcase project demonstrating web-development, networking, and cybersecurity skills.</p> <p>Big Beill's Greenhouse is a personalized project created by Mackenzie Neill, a graduate of Trent University's Computer Science program. This project serves as a platform to explore and refine skill's in web-development, networking, and cybersecurity. As an experimental project, it's a continuous work in progress and isn't being actively monitored for security vulnerabilities. Consequently, data protection is limited, and users should exercise caution when using the application.</p> <p>A live demo can be found at: www.big-beills-greenhouse.ca</p>"},{"location":"#general-overview","title":"General Overview","text":"<p>Author: Mackenzie Neill  Start date: December 15th, 2023</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Create, read, update, and delete recipes</li> <li>User authentication (JWT, bcrypt password hashing)</li> <li>Responsive design (works on desktop + mobile)</li> <li>RESTful API design</li> </ul>"},{"location":"#tech-stack","title":"Tech Stack","text":"<ul> <li>Frontend: React, Vite, TypeScript, SCSS</li> <li>Backend: Node.js, Express.js, Javascript</li> <li>Database: MongoDB, PostgreSQL</li> <li>Authentication: JSON Web Tokens (JWT), bcrypt</li> <li>Deployment: Vercel (frontend), Railway (backend)</li> </ul>"},{"location":"#security-features","title":"Security Features","text":"<ul> <li>HTTPS connection (only on cloud deployment)</li> <li>HTTP-only cookies</li> <li>Sanitization of all data from clients (cookies, query, params, and body)</li> <li>Strict CORS policy</li> <li>Password requirements, masking and encryption</li> </ul>"},{"location":"#setting-up-the-project","title":"Setting Up the Project","text":"<ol> <li>Open the <code>run_website.txt</code> file in the root directory.</li> <li>Set the URL to the path where you saved this project.</li> <li>Save the file with a <code>.bat</code> extension (or respective file type if you're not using windows).</li> <li>Inside the <code>client</code> folder, create a <code>.env</code> file and add:</li> <pre><code>\n        VITE_SERVER_LOCATION=http://localhost:4000\n    </code></pre> <li>Inside the `server` folder, create a `.env` file and add:</li> <pre><code>\n        SESSION_SECRET=\n        LOCAL_ENVIRONMENT=true\n    </code></pre> <li>Fill in a value for `SESSION_SECRET` (choose a strong secret).</li> <li>Run the `.bat` file (assuming your on windows)</li> </ol>"},{"location":"#setting-up-the-databases","title":"Setting up the databases","text":"<ol> <li>Create your own MongoDB cluster online.</li> <li>Update the connection string in `server/config/connectMongo.js`.</li> <li>Add the following line to the server\u2019s `.env` file:</li> <pre><code>\n    MONGO_DB_PASSWORD=\n    </code></pre> <li>Fill in your MongoDB password.</li> <li>Go to `/canadian-nutrient-file/DB_Setup.md` for instructions and code.</li> </ol>"},{"location":"backend/","title":"Backend Design","text":"<p>Framework used: Express JS</p> <p>This project uses RESTful API's for communication between client and server. Additionally, developers working on the backend are required to follow strict variable naming convention rules.</p>"},{"location":"backend/#backend-objects-documentation","title":"Backend Objects Documentation","text":"<p>The backend keeps data organized by requiring all variables ending with \"Object\" to match one of the following JSON structures. </p>"},{"location":"backend/#allowed-json-structures","title":"Allowed JSON Structures","text":"<p>Any JSON object with one of the listed names must match the structure underneath</p>"},{"location":"backend/#foodgroupobject","title":"foodGroupObject","text":"<pre><code>{\n   foodGroupId: number, //primary key\n   foodGroupName: string\n}\n</code></pre>"},{"location":"backend/#ingredientobject","title":"ingredientObject","text":"<pre><code>{\n   foodId: number, //primary key\n   foodDescription: string,\n   portion?: {\n      measureId: number,\n      measureDescription?: string,\n      amount: number\n   },\n   nutrition?: {\n      calories: number,\n      fat: number,\n      cholesterol: number,\n      sodium: number,\n      potassium: number,\n      carbohydrates: number,\n      fibre: number,\n      sugar: number,\n      protein: number\n   }\n}\n</code></pre>"},{"location":"backend/#conversionobject","title":"conversionObject","text":"<pre><code>{\n   measureId: number,\n   measureDescription?: string,\n   conversionFactorValue: number,\n}\n</code></pre>"},{"location":"backend/#recipeobject","title":"recipeObject","text":"<pre><code>{\n   _id: mongoose.SchemaTypes.ObjectId,\n   owner: mongoose.SchemaTypes.ObjectId,\n   title: string,\n   description: string,\n   image: string, // to be changed\n   ingredients: Array&lt;ingredientObject&gt;, // must include portion and nutrient field \n   instructions: Array&lt;string&gt;,\n   nutrition: {\n      calories: number,\n      fat: number,\n      cholesterol: number,\n      sodium: number,\n      potassium: number,\n      carbohydrates: number,\n      fibre: number,\n      sugar: number,\n      protein: number\n   }\n}\n</code></pre>"},{"location":"backend/#userobject","title":"userObject","text":"<pre><code>{\n   _id: mongoose.SchemaTypes.ObjectId,\n   username: string,\n   email: string,\n   bio: string,\n   relationship?: { // relationship with given target (usually current signed in user)\n      _id: mongoose.SchemaTypes.ObjectId,\n      target: mongoose.SchemaTypes.ObjectId,\n      type: number // 0 = no relationship, 1 = friends, 2 = received friend request, 3 sent friend request, 4 = self\n   }\n}\n</code></pre>"},{"location":"backend/#userfolderobject","title":"userFolderObject","text":"<pre><code>{\n   _id: mongoose.SchemaTypes.ObjectId,\n   folders: Array&lt;userFolderObject | mongoose.SchemaTypes.ObjectId&gt;,\n   users: Array&lt;userObject | mongoose.SchemaTypes.ObjectId&gt;\n}\n</code></pre>"},{"location":"backend/#router-documentation","title":"Router Documentation","text":"<p>There are 4 routers the client can utilize:</p> <ul> <li>Authentication router</li> <li>Ingredient router</li> <li>Recipe router</li> <li>User router</li> </ul>"},{"location":"backend/#authentication-routes","title":"/authentication Routes","text":"<p>The authentication router is used for managing a clients access to a user token</p>"},{"location":"backend/#register","title":"/register","text":"<pre><code>Type:\n   POST - Registers a new user\n\nExpects 3 arguments in body:\n   username: string\n   email: string\n   password: string\n\nRoute description:\n   - Checks if the username or email is already registered\n   - Salts and hashes the password\n   - Creates a user object and saves it to the database\n   - Creates JSON Web Token cookies and sends them to the client\n\nReturns:\n   - 201 user was successfully registered\n   - 400 invalid or missing arguments\n   - 409 username or email is already registered\n</code></pre>"},{"location":"backend/#login","title":"/login","text":"<pre><code>Type:\n   POST - Logs user in\n\nExpects 3 arguments in body:\n   username: string\n   password: string\n   rememberMe: boolean\n\nRoute description:\n   - Retrieves user data from the database\n   - Verifies the password matches the hashed password\n   - Creates JWT cookies and sends them to the client\n   - If rememberMe is true, sets cookie max-age to 30 days\n\nReturns:\n   - 200 user verified and cookies sent\n   - 400 invalid or missing arguments\n   - 401 username or password is incorrect\n</code></pre>"},{"location":"backend/#refresh","title":"/refresh","text":"<pre><code>Type:\n   POST - Issues a new user token\n\nExpects 0 arguments in body\n\nRoute description:\n   - Checks validity of refresh tokens in the client\u2019s cookies\n   - Creates and sends a new user token\n\nReturns:\n   - 200 new user token sent\n   - 400 arguments were provided\n   - 401 no valid refresh token was found\n</code></pre>"},{"location":"backend/#logout","title":"/logout","text":"<pre><code>Type:\n   POST - Logs the current user out\n\nExpects 0 arguments in body\n\nRoute description:\n   - Removes all cookies from the client\u2019s browser\n\nReturns:\n   - 200 cookies successfully removed\n   - 400 arguments were provided with this request\n</code></pre>"},{"location":"backend/#ingredient-routes","title":"/ingredient Routes","text":"<p>The ingredient router is used to manage the clients access to any ingredient related objects inside the database</p>"},{"location":"backend/#getobjectfoodidmeasureidamount","title":"/getObject/:foodId/:measureId?/:amount?","text":"<pre><code>Type:\n   GET - Returns a completed ingredient object\n\nExpects 3 arguments in params:\n   foodId: number\n   measureId: number (optional)\n   amount: number (optional)\n\nRoute description\n   - Grabs ingredientObject for foodID from the database\n   - If both measureId and amount have been provided, attach nutrition field to the ingredientObject\n   - Returns ingredientObject to client\n\nReturns:\n   - 200 ingredientObject returned\n   - 400 invalid or missing arguments\n\npayload: IngredientObject\n</code></pre>"},{"location":"backend/#list","title":"/list","text":"<pre><code>Type:\n   GET - returns a list of ingredientObjects\n\nExpects 4 arguments in query:\n   foodDescription: string (optional)\n   foodGroupId: string (optional)\n   skip: number (optional, default 0)\n   limit: number (optional, default 15)\n\nRoute description:\n   - Collects a list of ingredientObjects from the postgres database\n   - List will skip over the first {skip} number of results\n   - List will be limited to {limit} number of results\n   - Convert the contents of the list into an ingredientObject array\n\nReturns:\n   - 200 ingredientObject array returned\n   - 400 Invalid arguments\n\npayload: {\n   ingredientObjectArray: ingredientObject[],\n   count: number\n}\n</code></pre>"},{"location":"backend/#conversionoptionsfoodid","title":"/conversionOptions/:foodId","text":"<pre><code>Type:\n   GET - returns a list of conversion options for a given foodId\n\nExpects 1 argument in params:\n   foodId: number\n\nRoute description:\n   - Gathers a list of all conversion types associated with the foodId\n\nReturns:\n   - 200 conversionObject array\n   - 400 invalid or missing arguments\n\npayload: conversionObject[]\n</code></pre>"},{"location":"backend/#groups","title":"/groups","text":"<pre><code>Type:\n   GET - returns a list of all food groups inside postgres\n\nExpects 0 arguments in query\n\nMethod 'GET' description:\n   - Gathers a list of all food groups inside the postgres database\n\nMethod 'GET' returns:\n   - 200 foodGroupObject array returned\n   - 400 arguments were provided with this request\n\npayload: foodGroupObject[]\n</code></pre>"},{"location":"backend/#recipe-routes","title":"/recipe Routes","text":"<p>The recipe router is used to manage the clients access to any recipe related objects inside the database</p>"},{"location":"backend/#getobjectrecipeidincludenutrition","title":"/getObject/:recipeId/:includeNutrition?","text":"<pre><code>Type:\n   GET - returns a completed recipe object\n\nExpects 1 argument from params:\n   recipeId: integer\n   includeNutrition: boolean (optional, default false)\n\nRoute description:\n   - Builds a completed recipeObject using the recipeId provided\n   - Checks to make sure the client has read access to the recipe\n   - If includeNutrition is true, attaches the nutrition field to the recipeObject\n   - Returns the competed recipe object\n\nReturns:\n   - 200 recipeObject returned\n   - 400 invalid or missing arguments\n   - 401 client is attempting to access a private recipeObject without an access token\n   - 403 client does not have read access to recipeObject being requested\n\npayload: recipeObject\n</code></pre>"},{"location":"backend/#find","title":"/find","text":"<pre><code>Type: \n   GET - returns a list of recipes from the database\n\nExpects 6 arguments from query:\n   category: enum[\"public\", \"friends\", \"personal\"] (optional, default \"public\")\n   title: string (optional)\n   ingredients: number[] (optional)\n   limit: number (optional, default 6)\n   skip: number (optional, default 0)\n   count: boolean (optional, default false)\n   includeNutrition: boolean (optional, default false)\nRoute description:\n   - Collect a list of recipeObjects based on title and ingredients provided\n   - Skip the first {skip} number or recipeObjects found\n   - Limit the list to {limit} number of recipeObjects\n   - If {includeNutrition} is true, attach the nutrition field to each recipeObject\n   - Return the list to the client\n   - If {count} is true, also return the total number of recipeObjects that match search criteria\n\nReturns:\n   - 200 recipeObject array returned\n   - 400 invalid or missing arguments\n   - 401 client is attempting to use a category other than \"all\" without an access token\n\npayload: {\n   recipeObjectArray: recipeObject[], \n   count: number\n}\n</code></pre>"},{"location":"backend/#edit","title":"/edit","text":"<pre><code>Type:\n   POST - Creates a new recipe in the database\n   PUT - Makes changes to an already existing recipe in the databases\n\nExpects 6 arguments from body:\n   _id: mongoose.SchemaTypes.ObjectId (Only for PUT method)\n   title: string\n   description: string\n   image: string\n   ingredients: ingredientObject[]\n   instructions: string[]\n\nRoute Description:\n   - Packages arguments into a single json object\n   - Checks the json object to make sure it forms a valid RecipeObject\n   - If using POST method, saves the recipeObject to the database with current user as the recipe owner\n   - If using PUT method, checks to make sure client has write pillages for recipe with _id provided\n   - If using PUT method, replaces contents of the recipeObject in database with contents of the new recipeObject\n\nReturns: \n   - 201 recipe was added/changed in the database\n   - 400 invalid or missing arguments\n   - 401 client did not provide a valid access token\n   - 403 client does not have write access to the recipeObject\n</code></pre>"},{"location":"backend/#user-routes","title":"/user Routes","text":"<p>The user router is used to manage the clients access to any user related objects inside the database</p>"},{"location":"backend/#getobjectuseridrelationship","title":"/getObject/:userId?/:relationship?","text":"<pre><code>Type:\n   GET - return a userObject from the database\n\nExpects 2 arguments from params:\n   userId: mongoose object id (optional)\n   relationship: boolean (optional, default false)\n\nRoute Description:\n   - Gets a userObject based on userId provided\n   - If userId is not provided, get the userObject associated with the current signed in user\n   - If {relationship} is true, attach the relationship field to the userObject\n   - Reminder: the relationship field represents how the userObject feels about the current user\n\nReturns:\n   - 200 userObject returned\n   - 400 invalid arguments\n   - 401 userId and access token missing or relationship was requested without an access token\n\npayload: userObject\n</code></pre>"},{"location":"backend/#find_1","title":"/find","text":"<pre><code>Type:\n   GET - return a list of users from the database\n\nExpects 6 arguments from query:\n   username: string (optional)\n   email: string (optional)\n   limit: number (optional, default 6)\n   skip: number (optional, default 0)\n   relationship: number (optional)\n   count: boolean (optional, default false)\n\nRoute description:\n   - Collects a list of all users in the database that contain {username} and {email}\n   - If relationship field exists, only include userObjects that the current user has the given relationship with\n   - Reminder: 1 = friends, 2 = received friend requests, 3 = sent friend requests\n   - Skip over the first {skip} number of results found\n   - Limit the list size to the {limit} number of objects\n   - Return the list to the client\n   - If {count} is true, return the total number of items matching search criteria alongside count\n\nReturns: \n   - 200 userObject array returned\n   - 400 missing or invalid arguments\n   - 401 relationship filed exists but no access token found\n\npayload: {\n   userObjectArray: userObject[]\n   count: number\n}\n</code></pre>"},{"location":"backend/#folder","title":"/folder","text":"<pre><code>Type: \n   GET - return a list of folders from the database\n\nExpects 4 arguments from query:\n   folderId: mongoose object id (optional)\n   skip: number (optional, default 0)\n   limit: number (optional, default 6)\n   count: boolean (optional, default false)\n\nRoute description:\n   - If folderId does not exits, Collects a list of all folders owned by the current user\n   - If folderId field exists, Collect a list of all folders that have {folderId} in the parent folder field\n   - Skip the first {skip} number of folderObjects\n   - Limit the list to the {limit} number of folders\n   - Return list to client\n   - If count is true, return the number of folderObjects that meet search criteria\n\nReturns:\n   - 200 folderObject array returned\n   - 400 invalid arguments\n   - 401 access token could not be found\n\npayload: {\n   folderObjectArray: folderObject[]\n   count: number\n}\n</code></pre>"},{"location":"backend/#updateaccount","title":"/updateAccount","text":"<pre><code>Type:\n   POST - change the userObject saved in the database for current user\n\nExpects 3 arguments from body:\n   username: string\n   email: string\n   bio: string (optional)\n\nRoute description:\n   - Make sure the username or email doesn't already exist in database\n   - Update usersObject associated with the signed in user inside the database\n\nReturns:\n   - 200 userObject associated with signed in user has been updated\n   - 400 missing or invalid arguments\n   - 401 access token could not be found\n</code></pre>"},{"location":"backend/#sendfriendrequest","title":"/sendFriendRequest","text":"<pre><code>Type:\n   POST - creates a friend request in server database\n\nExpects 1 arguments from body:\n   receiverId: mongoose object id\n\nRoute description:\n   creates a friend request in the database, setting the current user as the sender and the {userId} as the receiver\n\nReturns:\n   - 201 friendRequestObject created and saved in the database\n   - 400 missing or invalid arguments\n   - 401 access token could not be found\n   - 409 friendRequestObject or friendshipObject already exists in the database\n\npayload: friendRequestObject\n</code></pre>"},{"location":"backend/#processfriendrequest","title":"/processFriendRequest","text":"<pre><code>Type:\n   POST - logs user out\n\nExpects 2 arguments from body:\n   requestId: mongoose object id\n   accept: boolean\n\nRoute description:\n   - Checks the validity of the friend request\n   - If accept is true, create a friendship object between the sender and receiver of the request\n   - If accept is false, delete the friend request from the database\n\nReturns:\n   - 201 friendRequestObject has been deleted and friendObject has been created in the database\n   - 204 friendRequestObject has been deleted from the database\n   - 400 missing or invalid arguments\n   - 401 client did not provide a valid access token\n   - 403 client does not have write access to the friendRequestObject\n   - 404 requestId not found in database\n   - 409 the approved friendship already exists in the database\n\npayload: friendshipObject\n</code></pre>"},{"location":"backend/#deletefriendrequest","title":"/deleteFriendRequest","text":"<pre><code>Type:\n   POST - deletes a friendship object from the database\n\nExpects 1 argument from body:\n   relationshipId: mongoose object id\n\nRoute description:\n   - Deletes the friendship object from the database\n\nReturn:\n   - 204 friendshipObject removed from databases\n   - 400 missing or invalid arguments\n   - 401 client did not provide a valid access token\n   - 403 client doesn't have write access to the friendship object\n</code></pre>"},{"location":"database/","title":"Database","text":""},{"location":"database/#database-design","title":"Database Design","text":"<p>This project uses two databases:</p> <ul> <li>MongoDB is used to store larger and more dynamic data in a remote, cloud-hosted environment.</li> <li>PostgreSQL stores a small amount of static data that needs to be accessed quickly. It is kept local, next to the server.</li> </ul>"},{"location":"database/#mongodb","title":"MongoDB","text":"<p>The MongoDB database is cloud-hosted. Its used to store dynamic data inside the website. Users, Recipes, and Friendships can be found inside the mongoDB database</p>"},{"location":"database/#relational-diagram","title":"Relational Diagram","text":"<p>Note: MongoDB supports nested JSON objects, which don\u2019t translate cleanly into relational diagrams. Any field labeled \u201cnested\u201d refers to embedded subdocuments, not independent objects.</p>"},{"location":"database/#postgresql","title":"PostgreSQL","text":"<p>This is the PostgreSQL server, containing data from the Canadian Nutrient File. The software runs locally on the machine you're using to run the server and requires manual setup. Setup instructions can be found in:</p> <p>NOTE: the setup instructions can be found inside <code>/canadian-nutrient-file/DB_Setup.md</code></p>"},{"location":"database/#relational-diagram_1","title":"Relational Diagram","text":""},{"location":"frontend/","title":"Frontend Design","text":"<p>Framework used: React Vite</p>"},{"location":"frontend/#component-documentation","title":"Component Documentation","text":"<p>The frontend has components setup for the developer to use for their pages, This section is dedicated to documenting those components</p>"},{"location":"frontend/#notebooktsx-documentation","title":"Notebook.tsx Documentation","text":"<p>location: client/src/components/Notebook.jsx</p> <p>The Notebook component simulates a flip-book style UI for content you wish to display to the user. It will display two react components at a time, inside the notebook pages (each page sharing the screen space width wise). Any additional react components will be accessible through a pagination bar under the notebook.</p>"},{"location":"frontend/#using-notebooktsx","title":"Using Notebook.tsx","text":"<p>Notebook accepts the following 4 props: - componentList    - Required prop.    - JSON object array (continue reading for structure)    - Array of page objects to display in the notebook. - parentPageNumber    - Optional prop.    - Number    - Tells notebook the exact page number that the first component in componentList belongs to.     - Defaults to 1. - requestNewPage    - Optional prop.    - Function (continue reading for structure)    - A function that fires when a user tries to navigate to a page that doesn\u2019t exist yet.  - componentCount    - Optional prop.    - Number    - Tells the notebook how many components exist, even if not all of them appear inside componentList.    - Defaults to size of componentList</p> <p>Note: looking at the naming conventions, you may notice that some props reference pages and others reference components, a page is just a set of 2 components. So the 5th and 6th components should be displayed on page 3.</p>"},{"location":"frontend/#componentlist-structure","title":"componentList Structure","text":"<p>ComponentList is an array of JSON objects. Two of these objects make up a single page. Each object consists of two fields:  - content: the react component that will be displayed on the notebook page  - props: an object containing the props being passed to the content component (field name is what the content component reads the prop as)</p>"},{"location":"frontend/#requestnewpage-structure","title":"requestNewPage Structure","text":"<p>This is a function that accepts one numerical prop. When the Notebook tries to display a page that it doesn't currently have access to the components for (like trying to display components 5 and 6 when only having access to 4 components) this function will be called, passing the page trying to be accessed as a numerical value prop. Its then this functions job to figure out how to handle accessing the page that's not currently accessible.</p>"},{"location":"frontend/#example-code","title":"Example Code","text":"<p>Some sample code for creating a paginated list while utilizing Notebook.jsx:</p> <p>Note: in this example RecipePreview.jsx is a regular react component that takes a recipe as a prop <pre><code>import React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Notebook from '../components/Notebook';\nimport PageComponentObject from '../interfaces/PageComponentObject';\nimport RecipePreview from '../components/notebookPages/RecipePreview';\n\nexport default function Home() {\n   const [searchParams, setSearchParams] = useSearchParams();\n   const pageNumber: number = Number(searchParams.get('pageNumber')) || 1;\n\n   const [componentList, setComponentList] = useState&lt;PageComponentObject[]&gt;([]);\n   const [componentCount, setComponentCount] = useState&lt;number&gt;(0);\n\n   // handle fetching page contents\n   function handlePageChange(newPage: number) {\n\n      // update the url to have the new page number\n      const newParam = new URLSearchParams(searchParams.toString());\n      newParam.set('pageNumber', newPage.toString());\n      setSearchParams(newParam);\n\n      // empty the componentList so the page does not look frozen to user\n      setComponentList([]);\n\n      //send a request to the server for 2 new items, based on newPage value\n      axios({method: 'get', url: `recipe/find?limit=2&amp;skip=${((newPage - 1) * 2)}&amp;count=true`})\n      .then((response) =&gt; {\n         // make sure enough entries exist in the database to display requested page\n         const maxPages = Math.round(((response.count + 1) / 2) + 1);\n         if (maxPages &gt;= newPage) {\n            // add each recipe to a component list\n            let newComponentList: PageComponentObject[] = [];\n            response.recipeObjectArray.forEach((recipe) =&gt; {\n               newComponentList.push({\n                  content: RecipePreview,\n                  props: {\n                     recipe\n                  }\n               })\n            });\n            setComponentList(newComponentList);\n            setComponentCount(response.count);\n         }\n         // if page being requested is too large to be accessible, return a page that isn't\n         else { handlePageChange(maxPages) }\n      });\n   }\n\n   return &lt;Notebook componentList={componentList} parentPageNumber={pageNumber} requestNewPage={handlePageChange} componentCount={componentCount}/&gt;\n}\n</code></pre></p>"},{"location":"intro/","title":"Big Beill's Greenhouse","text":"<p>A showcase project demonstrating web-development, networking, and cybersecurity skills.</p> <p>Big Beill's Greenhouse is a personalized project created by Mackenzie Neill, a graduate of Trent University's Computer Science program. This project serves as a platform to explore and refine skill's in web-development, networking, and cybersecurity. As an experimental project, it's a continuous work in progress and isn't being actively monitored for security vulnerabilities. Consequently, data protection is limited, and users should exercise caution when using the application.</p> <p>A live demo can be found at: www.big-beills-greenhouse.ca</p>"},{"location":"intro/#general-overview","title":"General Overview","text":"<p>Author: Mackenzie Neill  Start date: December 15th, 2023</p>"},{"location":"intro/#features","title":"Features","text":"<ul> <li>Create, read, update, and delete recipes</li> <li>User authentication (JWT, bcrypt password hashing)</li> <li>Responsive design (works on desktop + mobile)</li> <li>RESTful API design</li> </ul>"},{"location":"intro/#tech-stack","title":"Tech Stack","text":"<ul> <li>Frontend: React, Vite, TypeScript, SCSS</li> <li>Backend: Node.js, Express.js, Javascript</li> <li>Database: MongoDB, PostgreSQL</li> <li>Authentication: JSON Web Tokens (JWT), bcrypt</li> <li>Deployment: Vercel (frontend), Railway (backend)</li> </ul>"},{"location":"intro/#security-features","title":"Security Features","text":"<ul> <li>HTTPS connection (only on cloud deployment)</li> <li>HTTP-only cookies</li> <li>Sanitization of all data from clients (cookies, query, params, and body)</li> <li>Strict CORS policy</li> <li>Password requirements, masking and encryption</li> </ul>"},{"location":"intro/#setting-up-the-project","title":"Setting Up the Project","text":"<ol> <li>Open the <code>run_website.txt</code> file in the root directory.</li> <li>Set the URL to the path where you saved this project.</li> <li>Save the file with a <code>.bat</code> extension (or respective file type if you're not using windows).</li> <li>Inside the <code>client</code> folder, create a <code>.env</code> file and add:</li> <pre><code>\n        VITE_SERVER_LOCATION=http://localhost:4000\n    </code></pre> <li>Inside the `server` folder, create a `.env` file and add:</li> <pre><code>\n        SESSION_SECRET=\n        LOCAL_ENVIRONMENT=true\n    </code></pre> <li>Fill in a value for `SESSION_SECRET` (choose a strong secret).</li> <li>Run the `.bat` file (assuming your on windows)</li> </ol>"},{"location":"intro/#setting-up-the-databases","title":"Setting up the databases","text":"<ol> <li>Create your own MongoDB cluster online.</li> <li>Update the connection string in `server/config/connectMongo.js`.</li> <li>Add the following line to the server\u2019s `.env` file:</li> <pre><code>\n    MONGO_DB_PASSWORD=\n    </code></pre> <li>Fill in your MongoDB password.</li> <li>Go to `/canadian-nutrient-file/DB_Setup.md` for instructions and code.</li> </ol>"}]}